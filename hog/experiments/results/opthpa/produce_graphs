#### Graph Size Table ####
### graphsize table ####
gs_trendmean <- as.data.frame(mean(100-(graphsize[grep("AR*", graphsize$map), 3]/graphsize[grep("AR*", graphsize$map), 1])*100))
gs_trendmean <- cbind(gs_trendmean,
mean(100-(graphsize[grep("AR*", graphsize$map), 4]/graphsize[grep("AR*", graphsize$map), 2])*100))
gs_trendmean <- cbind(gs_trendmean, 
mean(100-(graphsize[grep("adaptive*", graphsize$map), 3]/graphsize[grep("adaptive*", graphsize$map), 1])*100))
gs_trendmean <- cbind(gs_trendmean, 
mean(100-(graphsize[grep("adaptive*", graphsize$map), 4]/graphsize[grep("adaptive*", graphsize$map), 2])*100))
gs_trendmean <- cbind(gs_trendmean, 
mean(100-(graphsize[grep("*room*", graphsize$map), 3]/graphsize[grep("*room*", graphsize$map), 1])*100))
gs_trendmean <- cbind(gs_trendmean, 
mean(100-(graphsize[grep("*room*", graphsize$map), 4]/graphsize[grep("*room*", graphsize$map), 2])*100))
names(gs_trendmean) <- c("BG-n", "BG-e", "AD-n", "AD-e", "Rooms-n", "Rooms-e")

# decomposition performance (avg room size and avg nodes pruned per room)
gs_trendanr <- as.data.frame(mean(graphsize[grep("AR*", graphsize$map), 5]))
gs_trendanr <- rbind(gs_trendanr, mean(graphsize[grep("adaptive*", graphsize$map), 5]))
gs_trendanr <- rbind(gs_trendanr, mean(graphsize[grep("*room*", graphsize$map), 5]))
row.names(gs_trendanr) <- c("BG", "AD", "Rooms")
names(gs_trendanr) <- c("avg_room")

gs_trendanp <- as.data.frame(mean(graphsize[grep("AR*", graphsize$map), 6]))
gs_trendanp <- rbind(gs_trendanp, mean(graphsize[grep("adaptive*", graphsize$map), 6]))
gs_trendanp <- rbind(gs_trendanp, mean(graphsize[grep("*room*", graphsize$map), 6]))
row.names(gs_trendanp) <- c("BG", "AD", "Rooms")
names(gs_trendanp) <- c("avg_pruned")

#### Speedup Graphs #### 

# omit outliers where RSR performed no search
ad_astar <- ad_astar[ad_ohastar$ne > 1,]
ad_ohastar <- ad_ohastar[ad_ohastar$ne > 1,]
bg_astar <- bg_astar[bg_ohastar$ne > 1,]
bg_ohastar <- bg_ohastar[bg_ohastar$ne > 1,]
rooms_astar <- rooms_astar[rooms_ohastar$ne > 1,]
rooms_ohastar <- rooms_ohastar[rooms_ohastar$ne > 1,]

# don't need to measure insertion time in this case (this can be 0 in an
# efficient implementation)
ad_ohastar$st <- ad_ohastar$st - ad_ohastar$insst
bg_ohastar$st <- bg_ohastar$st - bg_ohastar$insst
rooms_ohastar$st <- rooms_ohastar$st - rooms_ohastar$insst

ad_trend <- as.data.frame(ams(ad_astar$ne/ad_ohastar$ne, ad_astar$opl, 15))
ad_trend <- cbind(ad_trend[,1:2], ams(ad_astar$st/ad_ohastar$st, ad_astar$opl,
15)[,2:3])
names(ad_trend) <- c("opl", "ne_speedup", "st_speedup", "num_exp")

bg_trend <- as.data.frame(ams(bg_astar$ne/bg_ohastar$ne, bg_astar$opl, 25))
bg_trend <- cbind(bg_trend[,1:2], ams(bg_astar$st/bg_ohastar$st, bg_astar$opl,
25)[,2:3])
names(bg_trend) <- c("opl", "ne_speedup", "st_speedup", "num_exp")

rooms_trend <- as.data.frame(ams(rooms_astar$ne/rooms_ohastar$ne, rooms_astar$opl, 25))
rooms_trend <- cbind(rooms_trend[,1:2], ams(rooms_astar$st/rooms_ohastar$st, rooms_astar$opl,
25)[,2:3])
names(rooms_trend) <- c("opl", "ne_speedup", "st_speedup", "num_exp")


# drop points for which we have insufficient experiments
ad_trend <- ad_trend[ad_trend$num_exp >= 10,]
bg_trend <- bg_trend[bg_trend$num_exp >= 10,]
rooms_trend <- rooms_trend[rooms_trend$num_exp >= 10, ] # remaining buckets have < 10 data points

pdf(width=15, height=5, file="speedup.pdf")
par(mfrow=c(1,3))

plot(ad_trend$ne_speedup ~ ad_trend$opl, type="l", lty=1,   
main="Average Speedup: Adaptive Depth", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(ad_trend$st_speedup ~ ad_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

plot(bg_trend$ne_speedup ~ bg_trend$opl, type="l", lty=1,   
main="Average Speedup: Baldur's Gate", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,10), cex.main=2)
lines(bg_trend$st_speedup ~ bg_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

plot(rooms_trend$ne_speedup ~ rooms_trend$opl, type="l", lty=1,   
main="Average Speedup: Rooms", ylab="Avg. Speedup Factor", 
xlab="Path Length", ylim=c(1,20), cex.main=2)
lines(rooms_trend$st_speedup ~ rooms_trend$opl, type="l", lty=2)
legend("topleft", c("Nodes Expanded", "Search Time"),  lty=c(1,2), cex=1.25)

dev.off()

# branching factor stats
abf_trend_ad <- ams(ad_ohastar$nt / ad_ohastar$ne, ad_ohastar$opl, 15)[,1:2]
abf_trend_ad <- cbind(abf_trend_ad, ams(ad_astar$nt/ad_astar$ne, ad_astar$opl, 15)[,2:3])
names(abf_trend_ad) <- c("dist", "ps", "astar")

abf_trend_bg <- ams(bg_ohastar$nt / bg_ohastar$ne, bg_ohastar$opl, 25)[,1:2]
abf_trend_bg <- cbind(abf_trend_bg, ams(bg_astar$nt/bg_astar$ne, bg_astar$opl, 25)[,2:3])
names(abf_trend_bg) <- c("dist", "ps", "astar")

abf_trend_rooms <- ams(rooms_ohastar$nt / rooms_ohastar$ne, rooms_ohastar$opl, 25)[,1:2]
abf_trend_rooms <- cbind(abf_trend_rooms, ams(rooms_astar$nt/rooms_astar$ne, rooms_astar$opl, 25)[,2:3])
names(abf_trend_rooms) <- c("dist", "ps", "astar")

#drop points for which we have insufficient experiments
abf_trend_ad <- abf_trend_ad[1:11,]
abf_trend_bg <- abf_trend_bg[1:18,]
abf_trend_rooms <- abf_trend_rooms[1:20, ] # remaining buckets have < 10 data points

# branching factor graphs
pdf(width=15, height=5, file="branching.pdf")
par(mfrow=c(1,3))

plot(abf_trend_ad$ps ~ abf_trend_ad$dist, type="l", lty=1, 
main="Adaptive Depth: Avg. Branching Factor (8C PR BFR)", xlab="Path Length", ylab="Avg. Branching Factor", 
ylim=c(0,12))
lines(abf_trend_ad$astar ~ abf_trend_ad$dist, type="l", lty=2)
legend("topright", c("Perimeter Search", "A*"), lty=c(1, 2))

plot(abf_trend_bg$ps ~ abf_trend_bg$dist, type="l", lty=1, 
main="Baldur's Gate: Avg. Branching Factor (8C PR BFR)", xlab="Path Length", ylab="Avg. Branching Factor", 
ylim=c(0,12))
lines(abf_trend_bg$astar ~ abf_trend_bg$dist, type="l", lty=2)
legend("topright", c("Perimeter Search", "A*"), lty=c(1, 2))

plot(abf_trend_rooms$ps ~ abf_trend_rooms$dist, type="l", lty=1, 
main="Rooms: Avg. Branching Factor (8C PR BFR)", xlab="Path Length", ylab="Avg. Branching Factor", ylim=c(0,12))
lines(abf_trend_rooms$astar ~ abf_trend_rooms$dist, type="l", lty=2)
legend("topright", c("Perimeter Search", "A*"), lty=c(1, 2))

dev.off()

# speedup gained by online pruning and perimeter reduction
#pdf(width=15, height=5, file="4c_speedup.pdf")
#par(mfrow=c(1,3))
pdf(width=15, height=11, file="speedup.pdf")
par(mfrow=c(3,3))
plot(ad4rsr$st_speedup ~ ad4rsr$opl, lty=1, type="l", main="A. Search Time Speedup: Adaptive Depth (4C)", xlab="Path Length", 
ylab="Avg. Speedup Factor", ylim=c(1,10), cex.main=1.5)
lines(ad4rsr_bfr$st_speedup ~ ad4rsr_bfr$opl, lty=6, type="l")
lines(ad4rsr_pr$st_speedup ~ ad4rsr_pr$opl, lty=3, type="l")
lines(ad4rsr_pr_bfr$st_speedup ~ ad4rsr_pr_bfr$opl, lty=4, type="l")
legend("topleft", c("4ERR", "4ERR+OP", "4ERR+PR", "RSR"), lty=c(1,6,3,4))

plot(bg4rsr$st_speedup ~ bg4rsr$opl, lty=1, type="l", main="B. Search Time Speedup: Baldur's Gate (4C)", xlab="Path Length", 
ylab="Avg. Speedup Factor", ylim=c(1,5), cex.main=1.5)
lines(bg4rsr_bfr$st_speedup ~ bg4rsr_bfr$opl, lty=6, type="l")
lines(bg4rsr_pr$st_speedup ~ bg4rsr_pr$opl, lty=3, type="l")
lines(bg4rsr_pr_bfr$st_speedup ~ bg4rsr_pr_bfr$opl, lty=4, type="l")
legend("topleft", c("4ERR", "4ERR+OP", "4ERR+PR", "RSR"), lty=c(1,6,3,4))

plot(rooms4rsr$st_speedup ~ rooms4rsr$opl, lty=1, type="l", main="C. Search Time Speedup: Rooms (4C)", xlab="Path Length", 
ylab="Avg. Speedup Factor", ylim=c(1,25), cex.main=1.5)
lines(rooms4rsr_bfr$st_speedup ~ rooms4rsr_bfr$opl, lty=6, type="l")
lines(rooms4rsr_pr$st_speedup ~ rooms4rsr_pr$opl, lty=3, type="l")
lines(rooms4rsr_pr_bfr$st_speedup ~ rooms4rsr_pr_bfr$opl, lty=4, type="l")
legend("topleft", c("4ERR", "4ERR+OP", "4ERR+PR", "RSR"), lty=c(1,6,3,4))
#dev.off()
#
#pdf(width=15, height=5, file="8c_speedup.pdf")
#par(mfrow=c(1,3))
plot(ad8rsr_pr_bfr$st_speedup ~ ad8rsr_pr_bfr$opl, lty=1, type="l", main="D. Search Time Speedup: Adaptive Depth (8C)",
xlab="Path Length", ylab="Avg. Speedup Factor", cex.main=1.5, ylim=c(1,10))
lines(ad8swamps_r6_nc2$st_speedup ~ ad8swamps_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RSR", "Swamps"), lty=c(1,2))

plot(bg8rsr_pr_bfr$st_speedup ~ bg8rsr_pr_bfr$opl, lty=1, type="l", main="E. Search Time Speedup: Baldur's Gate (8C)",
xlab="Path Length", ylab="Avg. Speedup Factor", cex.main=1.5, ylim=c(1,10))
lines(bg8swamps_r6_nc2$st_speedup ~ bg8swamps_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RSR", "Swamps"), lty=c(1,2))

plot(rooms8rsr_pr_bfr$st_speedup ~ rooms8rsr_pr_bfr$opl, lty=1, type="l", main="F. Search Time Speedup: Rooms (8C)",
xlab="Path Length", ylab="Avg. Speedup Factor", cex.main=1.5, ylim=c(1,10))
lines(rooms8swamps_r6_nc2$st_speedup ~ rooms8swamps_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RSR", "Swamps"), lty=c(1,2))
#dev.off()


plot(ad8rsr_3x3_pr_bfr$st_speedup ~ ad8rsr_3x3_pr_bfr$opl, lty=1, type="l", main="G. Search Time Speedup: Adaptive Depth Scaled (8C)",
xlab="Path Length", ylab="Avg. Speedup Factor", cex.main=1.5, ylim=c(1,20))
lines(ad8swamps_3x3_r6_nc2$st_speedup ~ ad8swamps_3x3_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RSR", "Swamps"), lty=c(1,2))

plot(bg8rsr_3x3_pr_bfr$st_speedup ~ bg8rsr_3x3_pr_bfr$opl, lty=1, type="l", main="H. Search Time Speedup: Baldur's Gate Scaled (8C)",
xlab="Path Length", ylab="Avg. Speedup Factor", cex.main=1.5, ylim=c(1,10))
lines(bg8swamps_3x3_r6_nc2$st_speedup ~ bg8swamps_3x3_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RSR", "Swamps"), lty=c(1,2))

plot(rooms8rsr_3x3_pr_bfr$st_speedup ~ rooms8rsr_3x3_pr_bfr$opl, lty=1, type="l", main="I. Search Time Speedup: Rooms Scaled (8C)",
xlab="Path Length", ylab="Avg. Speedup Factor", cex.main=1.5, ylim=c(1,40))
lines(rooms8swamps_3x3_r6_nc2$st_speedup ~ rooms8swamps_3x3_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RSR", "Swamps"), lty=c(1,2))
dev.off()


plot(ad8rsr$st_speedup ~ ad8rsr$opl, lty=1, type="l", main="D. Search Time Speedup: Adaptive Depth (8C)", xlab="Path Length", 
ylab="Avg. Speedup Factor", ylim=c(1,10), cex.main=1.5)
lines(ad8rsr_bfr$st_speedup ~ ad8rsr_bfr$opl, lty=6, type="l")
lines(ad8rsr_pr$st_speedup ~ ad8rsr_pr$opl, lty=3, type="l")
lines(ad8rsr_pr_bfr$st_speedup ~ ad8rsr_pr_bfr$opl, lty=4, type="l")
lines(ad8swamps_r6_nc2$st_speedup ~ ad8swamps_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RRSR", "RRSR+OP", "RRSR+PR", "RSR", "Swamps"), lty=c(1,6,3,4,2))

plot(bg8rsr$st_speedup ~ bg8rsr$opl, lty=1, type="l", main="E. Search Time Speedup: Baldur's Gate (8C)", xlab="Path Length", 
ylab="Avg. Speedup Factor", ylim=c(1,10), cex.main=1.5)
lines(bg8rsr_bfr$st_speedup ~ bg8rsr_bfr$opl, lty=6, type="l")
lines(bg8rsr_pr$st_speedup ~ bg8rsr_pr$opl, lty=3, type="l")
lines(bg8rsr_pr_bfr$st_speedup ~ bg8rsr_pr_bfr$opl, lty=4, type="l")
lines(bg8swamps_r6_nc2$st_speedup ~ bg8swamps_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RRSR", "RRSR+OP", "RRSR+PR", "RSR", "Swamps"), lty=c(1,2,3,4,5))

plot(rooms8rsr$st_speedup ~ rooms8rsr$opl, lty=1, type="l", main="F. Search Time Speedup: Rooms (8C)", xlab="Path Length", 
ylab="Avg. Speedup Factor", ylim=c(1,10), cex.main=1.5)
lines(rooms8rsr_bfr$st_speedup ~ rooms8rsr_bfr$opl, lty=6, type="l")
lines(rooms8rsr_pr$st_speedup ~ rooms8rsr_pr$opl, lty=3, type="l")
lines(rooms8rsr_pr_bfr$st_speedup ~ rooms8rsr_pr_bfr$opl, lty=4, type="l")
lines(rooms8swamps_r6_nc2$st_speedup ~ rooms8swamps_r6_nc2$opl, lty=2, type="l")
legend("topleft", c("RRSR", "RRSR+OP", "RRSR+PR", "RSR", "Swamps"), lty=c(1,6,3,4,2))
