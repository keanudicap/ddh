loadResults <- function(filename, tnames, tclasses)
{
	results <- read.table(filename, col.names=tnames, colClasses=tclasses,
	header = FALSE, sep=",")
	results$map <- gsub("([a-zA-Z0-9-]+/)+", "", results$map)
	results$name <- gsub("\t", "", results$name)
	results$map <- gsub("\t", "", results$map)
	results	
} 

ams <- function(series, dist, stepsize=50) 
{        
	sval <- c() 
	dval <- c()
	nval <- c()

	for(i in seq(1, max(dist), by=stepsize))         
	{
		targetrows <- (dist >= i & dist < i+stepsize)
		selectedrows <- na.omit(series[targetrows])
		if(length(selectedrows) > 0)
		{
		sval <- c(sval, mean(selectedrows))
		dval <- c(dval, mean(seq(i, i+stepsize, by=1)))
		nval <- c(nval, 
		length(selectedrows))
		}
	}

	results <- as.data.frame(dval)
	results <- cbind(results, sval)
	results <- cbind(results, nval)
	names(results) <- c("avgdist", "avgseries", "bucketsize")
	results
}

averageSeries <- function(series, runs)
{
	seriesLength <- length(series)
	numRows <- c(seriesLength/runs)
	first <- c(1)
	last <- c(numRows)
	tmp <- rep(0, numRows)

	for(i in seq(1, numRows, by=1))
	{
		targetIndices <- seq(i, seriesLength, by=numRows)
		tmp[i] <- mean(series[targetIndices])
	}

	tmp
}

averageResults <- function(results, runs)
{
	numRows <- length(results[,1])
	targetRows <- c(numRows/runs)
	first <- c(1)
	last <- c(targetRows)
	tmp <- results[1:targetRows,] 

	cols <- names(results)

	for(i in seq(1, length(results), by=1))
	{
		if(typeof(results[,i]) == "integer" | 
			typeof(results[,i]) == "double" | 
			typeof(results[,i]) == "numeric")

		{
			tmp[,i] <- averageSeries(results[,i], runs)
		}
	}
	tmp
}

tms <- function(series, bucketsize=50) {
	tmp <- c()
	for(i in seq(1, length(series), by=bucketsize)) tmp <- c(tmp, mean(series[i:(i+bucketsize-1)]))
	tmp
}

speedup <- function(target, baseline, stepsize=25)
{
	results <- as.data.frame(ams(baseline$ne/target$ne, baseline$opl, stepsize))
	results <- cbind (results[,1:2], 
		ams(baseline$st/target$st, baseline$opl,stepsize)[,2:3])
	names(results) <- c("opl", "ne_speedup", "st_speedup", "num_exp")
	results
}

summary <- function(series, dist, runs=1, stepsize=25)
{
	runrows = length(series)/runs	
	first <- 1
	last <- runrows	
	retval <- ams(series[first:last], dist[first:last], 
			stepsize)[,1:2]

	if(runs > 1)
	{
		for(i in seq(2, runs, by=1))
		{
			first <- first + runrows;
			last <- last + runrows;
			retval <- cbind(retval, ams(series[first:last],
				dist[first:last], stepsize)$avgseries)
		}
	}
	names(retval) <- c("dist", seq(1, runs, by=1))
	retval
}

plotsummary <- function(series, dist, runs=1, stepsize=25)
{
	tmp <- summary(series, dist, runs, stepsize)
	minVal <- min(tmp[,2:(runs+1)])
	maxVal <- max(tmp[,2:(runs+1)])
	plot(tmp[,2] ~ tmp$dist, type="l", lty=1, main="n-Runs Summary",
	ylim=c(0,maxVal), xlab="Distance", ylab="Series")
	ltyVal <- c(1)
	namesVal <- c(toString(1))
	if(runs > 1)
	{
		for(i in seq(2, runs, by=1))
		{
			lines(tmp[,i+1] ~ tmp$dist, type="l", lty=i)
			ltyVal <- c(ltyVal, i)
			namesVal <- c(namesVal, toString(i))
		}
	}
	legend("topleft", namesVal, lty=ltyVal, cex=1.25)
}

plotresults <- function(series, dist, mainlabel, xlabel, ylabel, snames)
{
	maxy <- max(series);
	numSeries <- length(series[1,])
	plot(series[,1] ~ dist, lty=1, main=mainlabel, type="l", xlab=xlabel, 
	ylab=ylabel, ylim=c(0, maxy))
	if(numSeries > 1)
	{
		for(i in seq(2, numSeries, by=1))
		{
			lines(series[,i+1] ~ dist, type="l", lty=i)
		}
	}
	legend("topleft", snames, lty=seq(1, numSeries, by=1), cex=1.25)
}
